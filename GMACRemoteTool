#Generated Form Function
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 3/17/2016 10:54 AM
# Generated By: kbarto1
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$tbOutput = New-Object System.Windows.Forms.RichTextBox
$label1 = New-Object System.Windows.Forms.Label
$tbComputer = New-Object System.Windows.Forms.TextBox
$bClear = New-Object System.Windows.Forms.Button
$bSubmit = New-Object System.Windows.Forms.Button
$progressBar = New-Object System.Windows.Forms.ProgressBar
$tabInstall = New-Object System.Windows.Forms.TabControl
$tInstalls = New-Object System.Windows.Forms.TabPage
$cbIntune = New-Object System.Windows.Forms.CheckBox
$cbQuicktime = New-Object System.Windows.Forms.CheckBox
$cbGPS = New-Object System.Windows.Forms.CheckBox
$cbPQ = New-Object System.Windows.Forms.CheckBox
$cbChatter = New-Object System.Windows.Forms.CheckBox
$cbIPC = New-Object System.Windows.Forms.CheckBox
$cbJabber = New-Object System.Windows.Forms.CheckBox
$cbJava = New-Object System.Windows.Forms.CheckBox
$cbSnagit = New-Object System.Windows.Forms.CheckBox
$tNonInstalls = New-Object System.Windows.Forms.TabPage
$rbOTwrap = New-Object System.Windows.Forms.RadioButton
$rbRMS = New-Object System.Windows.Forms.RadioButton
$rbLogoffError = New-Object System.Windows.Forms.RadioButton
$rbProgramsCheck = New-Object System.Windows.Forms.RadioButton
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
$bSubmit_OnClick= 
{
    if($cbIntune.Checked) { Intune }
    if($cbQuicktime.Checked) { Quicktime }
    if($cbGPS.Checked) { GPS }
    if($cbPQ.Checked) { PQ }
    if($cbIPC.checked) { IPC }
    if($cbJabber.checked) { Jabber }
    if($cbJava.checked) { Java }
    if($cbIntune.checked) { Intune }
    if($cbSnagit.checked) { Snagit }
    if($rbRMS.checked) { RMS }
    if($rbOTwrap.checked) { OTwrap }
    if($rbLogoffError.checked) { LogoffError }
    if($rbProgramsCheck.checked) { ProgramsCheck }
    if($cbChatter.checked) { Chatter }
    #elseif(nothing.checked) { "" }


}

$bClear_OnClick=    # Clears all selected
{
                            
    $cbIntune.Checked = $false
    $cbQuicktime.Checked = $false
    $cbGPS.Checked = $false
    $cbPQ.Checked = $false
    $cbIPC.Checked = $false
    $cbJabber.Checked = $false
    $cbJava.Checked = $false
    $rbRMS.Checked = $false
    $rbOTwrap.Checked = $false
    $rbLogoffError.Checked = $false
    $rbProgramsCheck.Checked = $false
    $cbChatter.Checked = $false
    $cbSnagit.Checked = $false

}

$handler_form1_Load= 
{
#TODO: Place custom script here

}

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$form1.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 314
$System_Drawing_Size.Width = 777
$form1.ClientSize = $System_Drawing_Size
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.MaximizeBox = $False
$form1.Name = "form1"
$form1.SizeGripStyle = 2
$form1.Text = "Remote Tool"
$form1.add_Load($handler_form1_Load)

$tbOutput.BackColor = [System.Drawing.Color]::FromArgb(255,200,200,200)
$tbOutput.Cursor = [System.Windows.Forms.Cursors]::No
$tbOutput.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 303
$System_Drawing_Point.Y = 0
$tbOutput.Location = $System_Drawing_Point
$tbOutput.Name = "tbOutput"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 316
$System_Drawing_Size.Width = 474
$tbOutput.Size = $System_Drawing_Size
$tbOutput.TabIndex = 6
$tbOutput.Text = "*********************** DO NOT TYPE HERE. OUTPUT WILL SHOW UP HERE! *********************** >"
set-variable -name $tbOutput -value $tbOutput -scope Global

$form1.Controls.Add($tbOutput)

$label1.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 194
$label1.Location = $System_Drawing_Point
$label1.Name = "label1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 91
$label1.Size = $System_Drawing_Size
$label1.TabIndex = 5
$label1.Text = "Computer Name"

$form1.Controls.Add($label1)

$tbComputer.CharacterCasing = 1
$tbComputer.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 107
$System_Drawing_Point.Y = 191
$tbComputer.Location = $System_Drawing_Point
$tbComputer.MaxLength = 13
$tbComputer.Name = "tbComputer"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 20
$System_Drawing_Size.Width = 132
$tbComputer.Size = $System_Drawing_Size
$tbComputer.TabIndex = 2
$tbComputer.WordWrap = $False
set-variable -name $tbComputer -value $tbComputer -scope Global

$form1.Controls.Add($tbComputer)


$bClear.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 155
$System_Drawing_Point.Y = 232
$bClear.Location = $System_Drawing_Point
$bClear.Name = "bClear"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 29
$System_Drawing_Size.Width = 107
$bClear.Size = $System_Drawing_Size
$bClear.TabIndex = 4
$bClear.Text = "Clear"
$bClear.UseVisualStyleBackColor = $True
$bClear.add_Click($bClear_OnClick)

$form1.Controls.Add($bClear)


$bSubmit.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 34
$System_Drawing_Point.Y = 233
$bSubmit.Location = $System_Drawing_Point
$bSubmit.Name = "bSubmit"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 29
$System_Drawing_Size.Width = 107
$bSubmit.Size = $System_Drawing_Size
$bSubmit.TabIndex = 3
$bSubmit.Text = "Submit"
$bSubmit.UseVisualStyleBackColor = $True
$bSubmit.add_Click($bSubmit_OnClick)

$form1.Controls.Add($bSubmit)

$progressBar.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 3
$System_Drawing_Point.Y = 272
$progressBar.Location = $System_Drawing_Point
$progressBar.Name = "progressBar"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 22
$System_Drawing_Size.Width = 294
$progressBar.Size = $System_Drawing_Size
$progressBar.TabIndex = 1

$form1.Controls.Add($progressBar)

$tabInstall.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = -1
$System_Drawing_Point.Y = 0
$tabInstall.Location = $System_Drawing_Point
$tabInstall.Name = "tabInstall"
$tabInstall.SelectedIndex = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 185
$System_Drawing_Size.Width = 302
$tabInstall.Size = $System_Drawing_Size
$tabInstall.TabIndex = 0

$form1.Controls.Add($tabInstall)
$tInstalls.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 22
$tInstalls.Location = $System_Drawing_Point
$tInstalls.Name = "tInstalls"
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tInstalls.Padding = $System_Windows_Forms_Padding
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 159
$System_Drawing_Size.Width = 294
$tInstalls.Size = $System_Drawing_Size
$tInstalls.TabIndex = 0
$tInstalls.Text = "Installs"
$tInstalls.UseVisualStyleBackColor = $True

$tabInstall.Controls.Add($tInstalls)

$cbIntune.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 181
$System_Drawing_Point.Y = 98
$cbIntune.Location = $System_Drawing_Point
$cbIntune.Name = "cbIntune"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbIntune.Size = $System_Drawing_Size
$cbIntune.TabIndex = 8
$cbIntune.Text = "Intune COPY"
$cbIntune.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbIntune)


$cbQuicktime.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 181
$System_Drawing_Point.Y = 67
$cbQuicktime.Location = $System_Drawing_Point
$cbQuicktime.Name = "cbQuicktime"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbQuicktime.Size = $System_Drawing_Size
$cbQuicktime.TabIndex = 7
$cbQuicktime.Text = "Quicktime"
$cbQuicktime.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbQuicktime)


$cbGPS.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 181
$System_Drawing_Point.Y = 36
$cbGPS.Location = $System_Drawing_Point
$cbGPS.Name = "cbGPS"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbGPS.Size = $System_Drawing_Size
$cbGPS.TabIndex = 6
$cbGPS.Text = "GPS"
$cbGPS.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbGPS)


$cbPQ.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 181
$System_Drawing_Point.Y = 6
$cbPQ.Location = $System_Drawing_Point
$cbPQ.Name = "cbPQ"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbPQ.Size = $System_Drawing_Size
$cbPQ.TabIndex = 5
$cbPQ.Text = "Power Query"
$cbPQ.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbPQ)


$cbChatter.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 9
$System_Drawing_Point.Y = 129
$cbChatter.Location = $System_Drawing_Point
$cbChatter.Name = "cbChatter"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbChatter.Size = $System_Drawing_Size
$cbChatter.TabIndex = 4
$cbChatter.Text = "Chatter"
$cbChatter.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbChatter)


$cbIPC.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 9
$System_Drawing_Point.Y = 98
$cbIPC.Location = $System_Drawing_Point
$cbIPC.Name = "cbIPC"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbIPC.Size = $System_Drawing_Size
$cbIPC.TabIndex = 3
$cbIPC.Text = "IPC"
$cbIPC.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbIPC)


$cbJabber.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 9
$System_Drawing_Point.Y = 67
$cbJabber.Location = $System_Drawing_Point
$cbJabber.Name = "cbJabber"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbJabber.Size = $System_Drawing_Size
$cbJabber.TabIndex = 2
$cbJabber.Text = "Jabber"
$cbJabber.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbJabber)


$cbJava.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 9
$System_Drawing_Point.Y = 36
$cbJava.Location = $System_Drawing_Point
$cbJava.Name = "cbJava"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbJava.Size = $System_Drawing_Size
$cbJava.TabIndex = 1
$cbJava.Text = "Java"
$cbJava.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbJava)


$cbSnagit.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 9
$System_Drawing_Point.Y = 6
$cbSnagit.Location = $System_Drawing_Point
$cbSnagit.Name = "cbSnagit"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 24
$System_Drawing_Size.Width = 104
$cbSnagit.Size = $System_Drawing_Size
$cbSnagit.TabIndex = 0
$cbSnagit.Text = "Snagit"
$cbSnagit.UseVisualStyleBackColor = $True

$tInstalls.Controls.Add($cbSnagit)


$tNonInstalls.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 4
$System_Drawing_Point.Y = 22
$tNonInstalls.Location = $System_Drawing_Point
$tNonInstalls.Name = "tNonInstalls"
$System_Windows_Forms_Padding = New-Object System.Windows.Forms.Padding
$System_Windows_Forms_Padding.All = 3
$System_Windows_Forms_Padding.Bottom = 3
$System_Windows_Forms_Padding.Left = 3
$System_Windows_Forms_Padding.Right = 3
$System_Windows_Forms_Padding.Top = 3
$tNonInstalls.Padding = $System_Windows_Forms_Padding
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 159
$System_Drawing_Size.Width = 294
$tNonInstalls.Size = $System_Drawing_Size
$tNonInstalls.TabIndex = 1
$tNonInstalls.Text = "Non-Installs"
$tNonInstalls.UseVisualStyleBackColor = $True

$tabInstall.Controls.Add($tNonInstalls)

$rbOTwrap.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 107
$rbOTwrap.Location = $System_Drawing_Point
$rbOTwrap.Name = "rbOTwrap"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 128
$rbOTwrap.Size = $System_Drawing_Size
$rbOTwrap.TabIndex = 3
$rbOTwrap.TabStop = $True
$rbOTwrap.Text = "OTWrap Fix"
$rbOTwrap.UseVisualStyleBackColor = $True

$tNonInstalls.Controls.Add($rbOTwrap)


$rbRMS.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 76
$rbRMS.Location = $System_Drawing_Point
$rbRMS.Name = "rbRMS"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 165
$rbRMS.Size = $System_Drawing_Size
$rbRMS.TabIndex = 2
$rbRMS.TabStop = $True
$rbRMS.Text = "Restart McAfee Service"
$rbRMS.UseVisualStyleBackColor = $True

$tNonInstalls.Controls.Add($rbRMS)


$rbLogoffError.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 45
$rbLogoffError.Location = $System_Drawing_Point
$rbLogoffError.Name = "rbLogoffError"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 21
$System_Drawing_Size.Width = 128
$rbLogoffError.Size = $System_Drawing_Size
$rbLogoffError.TabIndex = 1
$rbLogoffError.TabStop = $True
$rbLogoffError.Text = "Logoff Error"
$rbLogoffError.UseVisualStyleBackColor = $True

$tNonInstalls.Controls.Add($rbLogoffError)


$rbProgramsCheck.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 10
$System_Drawing_Point.Y = 9
$rbProgramsCheck.Location = $System_Drawing_Point
$rbProgramsCheck.Name = "rbProgramsCheck"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 33
$System_Drawing_Size.Width = 128
$rbProgramsCheck.Size = $System_Drawing_Size
$rbProgramsCheck.TabIndex = 0
$rbProgramsCheck.TabStop = $True
$rbProgramsCheck.Text = "Programs Check"
$rbProgramsCheck.UseVisualStyleBackColor = $True

$tNonInstalls.Controls.Add($rbProgramsCheck)



#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function



#=========================================================================================================================================================
#================================================-------------Generating function calls-------------======================================================
#=========================================================================================================================================================


 Function Snagit { 				#SnagIt	
                        $comp=$tbComputer.Text
					 #$comp = read-host 'What is the hostname of the computer'																						
					 #$BCD = read-host 'What is the Branch Number?'		  
						If (Test-Connection $comp -count 2 -Quiet) 
						{
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n") 
							Copy-Item -Path "\\SVNASTX1001\GMFDE_Packages\Packages\SnagIt\SnagIt-11" -recurse -force -Destination "\\$comp\c$\install"
                            $tbOutput.SelectionColor = 'Yellow'
					   		$tbOutput.AppendText("Application is copied. Please wait for the file to instsall. `n") 
							invoke-command -computername $comp -scriptblock { & cmd /c "c:\windows\support\psexec /accepteula c:\install\SnagIt-11\Snagit-11.4.exe" /S} 
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("Snagit is installed. Please close the application. `n") 
						}
						else
						{
							write $comp 'is not online. Please check to make sure the machine is online, and then try again...'
							
						}
                       
					}
					
 Function ProgramsCheck {  #Programs Check
                        $comp=$tbComputer.Text
                        #$comp = read-host 'What is your computer name?'
                        Get-WmiObject  -Class win32_product -Impersonation 3 -computername $comp
                        gp HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |Select DisplayName, DisplayVersion, Publisher, InstallDate, HelpLink, UninstallString |ogv
                    }
                               
 Function Java {             #Java
                        $comp=$tbComputer.Text
                        $Service = Get-WmiObject -Class Win32_Service -ComputerName $Comp
                        $source = "\\SVNASTX1001\GMFDE_Packages\Packages\ACF-Java-1.7.21_Upgrade"
                        $dest = "\\$comp\C$\install"


                        $IPTest = Test-Connection $comp -count 2
                        $IPAddy = $IPTest.IPV4Address.IPAddressToString

                                function CheckJava()
                                {
                                If (test-path "\\$comp\c$\program files (x86)\java\JRE7")
                                    {
                                    $tbOutput.SelectionColor = 'Green'
                                    $tbOutput.AppendText("JRE7 has been copied correctly `n")
                                    }
                                else
                                    {
                                     write-host "JRE7 is not there, you will need to try again" -ForegroundColor blue
                                    }
                                }

                                function CheckCopy()
                                {
                                If (test-path "$dest\ACF-Java-1.7.21_Upgrade")
                                    {
                                    $tbOutput.SelectionColor = 'Green'
                                    $tbOutput.AppendText(" Java has been copied to c\install `n")
                                    }
                                else
                                    {
                                    $tbOutput.SelectionColor = 'Blue'
                                    $tbOutput.AppendText(" Java is not there, you will need to try again `n")
                                    }
                        }

                        If ($IPTest) 
                                        {
                                $ipaddy[1]
                                $tbOutput.SelectionColor = 'Yellow'
                                $tbOutput.AppendText("Begining to copy files `n") 
                                Copy-Item -Path $source -recurse -force -Destination $dest
                                    CheckCopy
                                write-host "Copied. starting install"
                                invoke-command -ComputerName $comp -scriptblock{ & cmd /c "c:\windows\support\psexec /accepteula  C:\install\ACF-Java-1.7.21_Upgrade\Java-1.7.21.exe" }
                                    CheckJava
                                $tbOutput.SelectionColor = 'Green'
                                $tbOutput.AppendText("Java Installed on $comp `n")
                                childitem "\\$comp\c$\program files (x86)\java\"

                                        }                       
                                        else
                                        {
                                            $noPing += $comp 
                                            write $comp 'is not online. Please check to make sure the machine is online, and then try again...'
                                        }

                    }
                    
 Function Jabber {				#Jabber
                        $comp=$tbComputer.Text
						If (Test-Connection $comp -count 2 -Quiet) 
						{
							$tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
							Copy-Item -Path "\\svnastx1001\gmfde_packages\packages\Cisco-Jabber" -recurse -force -Destination "\\$comp\c$\install"
							$tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
							invoke-command -computername $comp -scriptblock { & cmd /c "c:\windows\support\psexec /accepteula c:\install\Cisco-Jabber\Cisco-Jabber-10.6.exe" /S} 
							$tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("Jabber Installed on $comp `n")
						}
						  
						   
						else
						{
							
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
						}
                       
					}

 Function IPC {				#IPC
                        $comp=$tbComputer.Text	  
						If (Test-Connection $comp -count 2 -Quiet) 
						{
							$tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
							Copy-Item -Path "\\svnastx1001\gmfde_packages\packages\Cisco-SoftPhone" -recurse -force -Destination "\\$comp\c$\install"
							$tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
							invoke-command -computername $comp -scriptblock { & cmd /c "c:\windows\support\psexec /accepteula c:\install\Cisco-SoftPhone\CiscoIPCommunicatorSetup_8.6.2.0" /S} 
							$tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("IPC Installed on $comp `n")
						}
						else
						{
							
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
							
							
						}
                       
					}

 Function Chatter {				
                        $comp=$tbComputer.Text
						If (Test-Connection $comp -count 2 -Quiet) 
						{
							$tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
							Copy-Item -Path "\\svnastx1001\gmfde_packages\packages\SalesForce\ChatterDesktop\3.2.1" -recurse -force -Destination "\\$comp\c$\install"
							$tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
							invoke-command -computername $comp -scriptblock { & cmd /c "c:\windows\support\psexec /accepteula c:\install\ChatterDesktop\3.2.1\Salesforce-ChatterDesktop-3.2.1-MSI.exe" /S} 
							$tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("Quicktime Installed on $comp `n")
						}  
						else
						{
							
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
							
						}
                       
					}

 Function LogoffError { #LogoffError
                        $comp=$tbComputer.Text
						get-process -ComputerName $Comp | Select Name, ID | Sort Name | FT -AutoSize | ogv
						$choice = read-host "is mfeffcoreservice running?"

						if($choice -match "yes")
						{

							$process = "MfeFfCoreService"
							(Get-WmiObject Win32_Process -ComputerName $comp | ?{ $_.ProcessName -match "$process" }).Terminate()
							$tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("$process has been terminated on $computername `n")
							get-process -ComputerName $Comp | Select Name, ID | Sort Name | FT -AutoSize |ogv
						}
						else
						{
						    $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("process is not currently running `n")
						}
                      

					}
					
 Function RMS {   #RMS
                        $comp=$tbComputer.Text
						If (Test-Connection $comp -count 2 -Quiet) 
						{  
                     	    $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("Attempting to restart McAfee Service `n") 
                     	    Invoke-Command -ComputerName $comp {Stop-Service "McAfee Agent Service"}                            
                     	    Get-Service -ComputerName $comp  -Name "McAfee Agent Service" | ogv                                        
                     	    $tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("Please wait while attempting to restart service...`n")                    
                     	    Start-Sleep 10                                                                                 
                     	    Invoke-Command -ComputerName $comp  {Start-Service "McAfee Agent Service"}                         
                            $tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("Program stop/start completed. `n")                                         	 
                     	    Start-Sleep -s 10                                                                                
                     	    Get-Service -ComputerName $comp  -Name "McAfee Agent Service" | ogv                                      
                     } 
                     else
						{
							
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
							
						}
                    }

 Function PQ {				#MS-Power Query
                    $comp=$tbComputer.Text				
						If (Test-Connection $comp -count 2 ) 
						{
							$tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
							Copy-Item -Path "\\SVNASTX1001\GMFDE_Packages\Packages\MS-Power-Query-for-Excel" -recurse -force -Destination "\\$comp\c$\install"
							$tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
							invoke-command -computername $comp -scriptblock { & cmd /c "msiexec.exe /i C:\Install\MS-Power-Query-for-Excel\PowerQuery32bit.msi" /q ACCEPT_EULA=1 }
							$tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("Power Query Installed on $comp `n")
							
						}
						  
						   
						else
						{
							
							
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
						}
                       
					}                     

 Function GPS {     #GPS Install
                           $comp=$tbComputer.Text
                       # $comp = read-host 'What is the Hostname of the computer'
  
                          If (Test-Connection $comp -count 2 -Quiet) 
                          {
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
                            Copy-Item -Path "\\SVNASTX1001\GMFDE_Packages\Packages\Panviva-SupportPoint-GPS"  -recurse -force -Destination "\\$comp\c$\install"
                            $tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
                            invoke-command -computername $comp -scriptblock { & cmd /c "c:\windows\support\psexec /accepteula C:\install\Panviva-SupportPoint-GPS\Panviva-SupportPoint-GPS.exe" /q} 
                            $tbOutput.SelectionColor = 'Green'
                            $tbOutput.AppendText("GPS Installed on $comp `n")
                          }
  
   
                          else
                          {
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
                          }
      

                     }

 Function Quicktime { #Quicktime
                        $comp=$tbComputer.Text															 		  
	                    If (Test-Connection $comp -count 2) 
	                    {
		                    $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
		                    Copy-Item -Path "\\SVNASTX1001\GMFDE_Packages\Packages\QuickTime" -recurse -force -Destination "\\$comp\c$\install"
                            $tbOutput.SelectionColor = 'Yellow'
                            $tbOutput.AppendText("files copied. starting install `n")
                            invoke-command -computername $comp -scriptblock { & cmd /c "msiexec.exe /i C:\Install\Quicktime\QuickTime.msi" }  
                            invoke-command -computername $comp -scriptblock { & cmd /c "msiexec.exe /i C:\Install\Quicktime\AppleApplicationSupport.msi" }           
                            if (test-path "\\$comp\c$\ProgramData\Microsoft\Windows\Start Menu\Programs\QuickTime")
                                {
                                $tbOutput.SelectionColor = 'Green'
							    $tbOutput.AppendText("Quicktime Installed on $comp `n") 
                                }
                            else
                                {
                                $tbOutput.SelectionColor = 'Red'
							    $tbOutput.AppendText("There seems to have been a problem. Quicktime was not installed on $comp `n") 
                                }
                        }
                        else
                        {
                            $tbOutput.SelectionColor = 'Red'
                            $tbOutput.AppendText("$comp is not online. Please check to make sure the machine is online, and then try again... `n")
                        }

                }

 Function Intune { #Intune
                           $comp=$tbComputer.Text
                     #    $comp = read-host 'What is the hostname of the computer'															

		 		  
	                        If (Test-Connection $comp -count 2) 
	                        {
		                    $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("$comp --- online `n")
                            $tbOutput.SelectionColor = 'Yellow'
							$tbOutput.AppendText("Please wait for the copy to $tbComputer to complete. This may take several minutes. Do not end the program. `n")
		                    Copy-Item -Path "\\svnastx1001\gmfde_packages\packages\MS-Windows-Intune-Agent" -recurse -force -Destination "\\$comp\c$\install"
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText(" Intune is copied over. Verified location in C:\Install `n")    
       
                                if (test-path "\\$comp\c$\install\MS-Windows-Intune-Agent\Windows_Intune_Setup.exe")
                                    {
                                    $tbOutput.SelectionColor = 'Green'
							        $tbOutput.AppendText(" Copied to $Comp `n")
                                    }
                                else
                                    {
                                    $tbOutput.SelectionColor = 'Red'
							        $tbOutput.AppendText("There seems to have been a problem. Intune was not copied correctly to $comp `n") 
                                    }
                            }
                            else
                            {
                            $tbOutput.SelectionColor = 'Red'
							$tbOutput.AppendText(" $comp is not online. Please check to make sure the machine is online, and then try again... `n") 
                        }
                       
                }

 Function OTWrap { #OTWrap
                        $comp=$tbComputer.Text
                        $bad1 = get-item "\\$comp\c$\Program Files (x86)\Microsoft Office\Office14\STARTUP"
                        $bad2 = get-item "\\$comp\c$\Program Files (x86)\Microsoft Office\Office14\XLSTART"

                        $bad1 | Remove-Item -force
                        $bad2 | Remove-Item -force

                        if (get-item "\\$comp\c$\Program Files (x86)\Microsoft Office\Office14\XLSTART")
                        {
                            $tbOutput.SelectionColor = 'Red'
							$tbOutput.AppendText("XLSTART folder is still there on $comp... please do this manually `n") 
                        }
                        else
                        {
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText(" on $comp --- online `n")
                        }

                        if (get-item "\\$comp\c$\Program Files (x86)\Microsoft Office\Office14\STARTUP")
                        {
                            $tbOutput.SelectionColor = 'Red'
							$tbOutput.AppendText("STARTUP folder is still there on $comp... please do this manually `n") 
                        }
                        else
                        {
                            $tbOutput.SelectionColor = 'Green'
							$tbOutput.AppendText("Removal on $comp complete `n")
                        }

                }

#Call the Function
GenerateForm
